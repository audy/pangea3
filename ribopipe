#!/bin/bash +x
set -e # script dies if anything exits in error.
# --------------------------------- USAGE -----------------------------------

# ./ribopipe.sh <directory> <database> <shannon-reads>

# - Directory contains reads
# - Database is a TaxCollector database in FASTA format
# - Shannon-reads is the number of reads to use to calculate the
#     Shannon Diversity Index

# ------------------------------ CONFIGURATION ------------------------------

# So you can manually specify which python/perl you want to use.
python=$(which python)
perl=$(which perl)

assemble="./src/clc/clc_ref_assemble_long"
filter="./src/clc/filter_matches"
make_tables="./src/clc/assembly_table"
count_phyl="$python src/phylo_count.py"
megaclustable="$perl src/megaclustable.pl"
pre_shannon="$python src/preshannon.py"
shannon="$perl src/shannon.pl"
unassembled_reads="src/clc/unassembled_reads"
label_fasta="python src/label_fasta.py"
cdhit="src/cdhit/cd-hit-est"
cores='2'
# To get number of cores automatically, uncomment:
#cores=`system_profiler|grep Total\ Number\ Of\ Cores | cut -d ':' -f 2`

# ---------------------------------------------------------------------------

dir=$1 # working directory
reads=$1/reads # where the reads are at
clc_out=$1/clc_out # where CLC's output goes
tables=$1/tables # where the tables go
database=$2 # the RDP database
shannon_reads=$3 # number of reads for Shannon-Diversity Index
run=$4 # This gets added to the headers of the unmatched reads (ugly patch)
unassembled=$1/reads/unassembled # Where unassembled reads are kept
logfile=$1/log.txt

# ---------------------------------------------------------------------------
bar="----------------------------------------------------------------------"

main () {
  title "Started: $(date)"
  status "$bar"
  status "DIR = $dir"
  status "READS = $reads"
  status "RUN = $run"
  status "CLC_OUT = $clc_out"
  status "TABLES = $tables"
  status "DATABASE = $database"
  status "SHANNON_READS = $shannon_reads"
  status "CORES = $cores"
  status "LOGFILE = $logfile"
  
  mkdir -p $clc_out
  mkdir -p $tables
  mkdir -p $unassembled
  
#  reference_assemble
  
#  filter
  
#  generate_tables
  
  cluster_unassembled
  
#  count_phylogenies $tables  
  
#  make_megaclustables $tables $dir
  
#  run_shannon # on clustered reads!
  
  title "Finished: $(date)."
}

reference_assemble () { 
  title "Assembling $reads against $database"

  for file in $reads/*.txt
  do
    status "Assembling $(basename $file) against $database"
    $assemble -o "$clc_out/$(basename $file).out" \
      -r random \
      -a global \
      -q -p fb ss 0 500 "$file" \
      -d $database \
      -l 0.5 \
      -s 0.8
  done
}

filter () {
  title "Filtering with $filter"
  for sim in 80 90 95 99
  do
    for file in $clc_out/*.out
    do     
      mkdir -p $clc_out/L_98_S_$sim
      status "Filtering $(basename $file) @ $sim%"
      $filter -a $file \
         -l 0.98 \
         -s .$sim \
         -o $clc_out/L_98_S_$sim/$(basename $file).filtered 
    done
  done
}

generate_tables() {
  title "Generating tables with $make_tables and \n filtering unassembled reads"
  for sim in 80 90 95 99
  do
    
    rm -f $unassembled/unassembled_"$sim".fa # Just in case it already exists
    
    for file in $clc_out/L_98_S_$sim/*.filtered
    do
      # Generate tables for each percent similarity
      mkdir -p $tables/L_98_S_$sim
      #$make_tables -n -p -s $file > $tables/L_98_S_$sim/$(basename $file).table
      
      status "Getting unassembled reads from $(basename $file) @ $sim%"
      # Output unassembled reads for each percent similarity
      mkdir -p $unassembled/L_98_S_$sim
      $unassembled_reads \
         -a $file \
         -o $unassembled/L_98_S_$sim/$(basename $file).fa
      
      status "Labelling unassembled reads from $(basename $file)"
      # Concatenate unassembled reads while adding ids to header
      $label_fasta $unassembled/L_98_S_$sim/$(basename $file).fa $run >> \
        $unassembled/unassembled_"$sim".fa
    done
    
    rm -r $unassembled/L_98_S_$sim/
    
  done
}

cluster_unassembled() {
  title "Clustering unassembled reads with $cdhit"
  
  for sim in 80 90 95 99
  do
    status "Clustering @ $sim%"
    $cdhit \
      -i $unassembled/unassembled_$sim.fa \
      -o $unassembled/clustered_$sim.fa \
      -c 0.$sim \
      -n $cores   \
      -g 1 > /dev/null
  done
  
}

count_phylogenies () {
  title "Summing up phylogenies with $count_phyl"
  table_dir=$1
  
  for sim in 80 90 95 99
  do
    for file in $table_dir/L_98_S_$sim/*.table
    do
      status "Counting $(basename $file) @ $sim%"
      $count_phyl $database $file
      cat $file.paired.out $file.unpaired.out > $file.both.out
     done
  done
}

make_megaclustables () {
  title "Megaclustableing with $megaclustable"
  table_dir=$1
  out_dir=$2
  
  megaclustable 99 6 species
  megaclustable 95 5 genus
  megaclustable 90 4 family
  megaclustable 90 3 order
  megaclustable 90 2 class
  megaclustable 80 1 phylum
  megaclustable 80 0 domain
}

megaclustable() {
    sim=$1
    t=$2
    out=$3
    
    status "Megaclustable $out: $sim%, t=$t"
    $megaclustable \
      -m $(ls -m $table_dir/L_98_S_$sim/*.both.* | tr -d ',\n') \
      -t $t \
      -o $out_dir/$out.txt  
}

run_shannon () {
  title "Shannon Diversity Indexing"

  mkdir -p $tables/shannon/
  for sim in 80 90 95 99
  do
    mkdir -p $tables/shannon/L_98_S_$sim
    # Make files
    for file in $tables/L_98_S_$sim/*.table
    do
      $pre_shannon $shannon_reads $file $tables/shannon/L_98_S_$sim/$(basename $file)
    done    
  done
  
  # Run Phylocount
  count_phylogenies "$tables/shannon"    
  
  # Run Megaclustable
  make_megaclustables "$tables/shannon" "$tables/shannon/"
  
  # Run shannon.pl on our standardized tables
  for filename in $tables/shannon/*.txt
  do
    $shannon -t $filename >> $filename
  done
}

title () {
  purple="\033[0;35m"
  nocolor="\033[0m"
  msg="$bar\n"$purple"$1"$nocolor
  echo -e $msg
  echo $msg >> $log
}

status () {
  green="\033[0;36m"
  nocolor="\033[0m"
  msg="[$green*$nocolor] $1" 
  echo -e $msg
  echo $msg >> $log
}

main
