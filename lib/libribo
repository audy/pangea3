#!/bin/bash

# Tons of hacky obfuscated methods used by ribopipe!


initialize! () {
  title "$(date)"
  status "DIR = $dir"
  status "READS = $reads"
  status "RUN = $run"
  status "CLC_OUT = $clc_out"
  status "TABLES = $tables"
  status "DATABASE = $database"
  status "SHANNON_READS = $shannon_reads"
  status "CORES = $cores"
  status "LOGFILE = $logfile"
  
  mkdir -p $clc_out
  mkdir -p $tables
  mkdir -p $unassembled
}

cluster_unassembled () { # Cluster unassembled with cd-hit
  
  separate_unassembled
  
  cluster
  
  make_cluster_tables

}

reference_assemble () { # Run CLC Reference Assembler
  title "Assembling $reads against $database"

  for file in $reads/*.txt
  do
    status "Assembling $(basename $file) against $database"
    $assemble -o "$clc_out/$(basename $file).out" \
      -r random \
      -a global \
      -q -p fb ss 0 500 "$file" \
      -d $database \
      -l 0.5 \
      -s 0.8
  done
}

filter () { # Filters CLC assembly output based on percent similarity
  title "Filtering with $filter"
  for sim in 80 90 95 99
  do
    for file in $clc_out/*.out
    do     
      mkdir -p $clc_out/L_98_S_$sim
      status "Filtering $(basename $file) @ $sim%"
      $filter -a $file \
         -l 0.98 \
         -s .$sim \
         -o $clc_out/L_98_S_$sim/$(basename $file).filtered 
    done
  done
}

generate_tables () { # Generates CLC Tables
  title "Generating tables with $make_tables"
  for sim in 80 90 95 99
  do
    for file in $clc_out/L_98_S_$sim/*.filtered
    do
      status "$(basename $file) => $sim%"
      # Generate tables for each percent similarity
      mkdir -p $tables/L_98_S_$sim
      $make_tables \
        -n \
        -p \
        -s $file \
        > $tables/L_98_S_$sim/$(basename $file).table
    done
  done
}

separate_unassembled () { # Separates unassembled reads
  title "Separating/labelling unassembled reads"
  status "Label = $run"

  rm -rf $unassembled/L_98_S_$sim/$.fa # CLC appends :\
    

  for sim in 80 90 95 99
  do
    for file in $clc_out/L_98_S_$sim/*.filtered
    do
      status "Separating $(basename $file) @ $sim"
      # Output unassembled reads for each percent similarity

      #rm -f $unassembled/L_98_S_$sim/$(basename $file).fa # CLC appends :\
      #rm -f $unassembled/unassembled_"$sim".fa # Clean

            
      mkdir -p $unassembled/L_98_S_$sim
      $unassembled_reads \
         -p \
         -a $file \
         -o /dev/stdout | \

         # Concatenate unassembled reads while adding ids to header
         # Reads have to go together a certain way to be clustered
         # 5'-read1-3' + 3'-read2-5'
         
         $label_fasta \
           $unassembled/L_98_S_$sim/$(basename $file).fa \
           $run \
           >> $unassembled/unassembled_"$sim".fa
    done
  done
}

cluster () { # Clusters unassembled reads
  directory=$1
  wordsize=10
  
  title "Clustering reads in $directory with $cdhit"
  status "Overhang = $cdhit_overhang"
  status "Wordsize = $wordsize"
  
  for sim in 80 90 95 99
  do
    input=$directory/unassembled_$sim.fa
    output=$directory/clustered_$sim.fa
    
    $cdhit \
      -i $input \
      -o $output \
      -c 0.$sim \
      -n $wordsize \
      -T $cores \
      -s 0.$cdhit_overhang \
      -g 1 \
      > /dev/null
      
    thismany=`grep -c '^>' $directory/clustered_$sim.fa`
    status "$sim% => $thismany clusters"
  done
}

make_cluster_tables () { # Makes tables similar to phylocount from clusters
  title "Building cluster tables"
  
  for sim in 80 90 95 99
  do
    file=$unassembled/clustered_$sim.fa.clstr
    status "Counting $file"
    $count_clusters $file $clust_min > $tables/clusters_$sim.txt
  done
}

count_phylogenies () { # Runs phylocount.py
  title "Summing up phylogenies with $count_phyl"
  table_dir=$1
  
  for sim in 80 90 95 99
  do
    for file in $table_dir/L_98_S_$sim/*.table
    do
      status "Counting $(basename $file) @ $sim%"
      $count_phyl $database $file
      cat $file.paired.out $file.unpaired.out > $file.both.out
     done
  done
}

make_megaclustables () { # Makes Megaclust Tables
  title "Megaclustableing with $megaclustable"
  table_dir=$1 # where they're from
  out_dir=$2 # where they go, appended to $tables

  megaclustable 99 6 species $out_dir
  megaclustable 95 5 genus $out_dir
  megaclustable 90 4 family $out_dir
  megaclustable 90 3 order $out_dir
  megaclustable 90 2 class $out_dir
  megaclustable 80 1 phylum $out_dir
  megaclustable 80 0 domain $out_dir
}


megaclustable() { # Runs megaclustable.pl
    sim=$1
    t=$2
    out=$3
    out_dir=$4

    status "Megaclustable $out: $sim%, t=$t"
    status "$tables/$out_dir/$out.txt"
    $megaclustable \
      -m $(ls -m $table_dir/L_98_S_$sim/*.both.* | tr -d ',\n') \
      -t $t \
      -o $tables/$out_dir/$out.txt
}

run_shannon () { # The shannon-diversity index
  title "Shannon Diversity Indexing"

  mkdir -p $tables/shannon/
  
  make_shannon_tables () {
    # Make Shannon Tables!
    for sim in 80 90 95 99
    do
      mkdir -p $tables/shannon/L_98_S_$sim
      for file in $tables/L_98_S_$sim/*.table
      do
        $pre_shannon \
          $shannon_reads \
          $file \
          $tables/shannon/L_98_S_$sim/$(basename $file)
      done
    done
  }
  #make_shannon_tables
  
  separate_unassambled_shannon () {
    # Separate Unassembled reads using Shannon Tables!
    mkdir -p $tables/shannon/unassembled
    for file in $reads/*.txt
    do
      for sim in 80 90 95 99
      do
        echo $file, $sim
        mkdir -p $tables/shannon/unassembled/L_98_S_$sim
        dir="$tables/shannon/L_98_S_$sim"
        $get_unassembled_py \
          $dir/$(basename $file).out.filtered.table \
          $file |
        $label_fasta \
          $file > $tables/shannon/unassembled/L_98_S_$sim/$(basename $file)
      done
    done
  }
  #separate_unassambled_shannon
  
  # Run Phylocount
  #count_phylogenies "$tables/shannon"
    
  # concatenate unassembled reads
  cluster () {
    for sim in 99
    do
      rm -f $tables/shannon/unassembled/unassembled_$sim.txt
      status "Concatenating unassembled @ $sim"
      for file in $tables/shannon/unassembled/L_98_S_$sim/*
      do
        cat $file >> $tables/shannon/unassembled/unassembled_$sim.txt
      done
      mkdir -p $tables/shannon/unassembled/clusters
      # Run CD-HIT on unassembled reads
      status "running CDHIT: $tables/shannon/unassembled/unassembled_$sim.txt"
      $cdhit \
        -i $tables/shannon/unassembled/unassembled_$sim.txt \
        -o $tables/shannon/unassembled/clusters/clusters_$sim.txt \
        -c 0.$sim \
        -n 10 \
        -T 16 \
        -M 0 \
        > /dev/null 
    done
  }

  cluster
  

  # Create hybrid-tables  
  hybrid_table () {
    CUTOFF=1
    # Run Megaclustable-like script    
    for sim in 80 90 95 99
    do
      python src/count_clusters.py \
        $tables/shannon/unassembled/clusters/clusters_$sim.txt.clstr \
        $CUTOFF \
        > $tables/shannon/unassembled/clusters/cluster_table_$sim.txt
        
    done
    
    mkdir -p $tables/hybrid_tables/

    ht () {
      sim=$1
      name=$2
      python src/hybrid_table.py \
        $tables/shannon/unassembled/clusters/cluster_table_$sim.txt \
        $tables/$name.txt > $tables/hybrid_tables/$name.txt
    }
      
    # Z.O.M.G!! DSL
    ht 99 species
    ht 95 genus
    ht 90 family
    ht 90 order
    ht 90 class
    ht 80 phylum
    ht 80 domain 
  }
  hybrid_table 
  
  # Run shannon.pl on hybrid-tables tables
  for file in $tables/hybrid_tables/*.txt
  do
    $shannon -t $file >> $file
  done
}

title () {
  purple="\033[0;35m"
  nocolor="\033[0m"
  c="$purple>>>$nocolor"
  d=">>>"
  echo -e $c $1
  echo $d $1 >> $logfile
}

status () {
  green="\033[0;36m"
  nocolor="\033[0m"
  c="[$green*$nocolor]" 
  d="[*]"
  echo -e $c $1
  echo $d $1 >> $logfile
}
